#version 310 es

/* Copyright (c) 2015-2017, ARM Limited and Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

layout(local_size_x = 8, local_size_y = 8) in;
layout(location = 0) uniform vec3 uSunDir;
layout(location = 1) uniform int uSteps;
layout(location = 2) uniform float uStart;
layout(location = 3) uniform float uStep;
layout(rgba16f, binding = 0) uniform writeonly mediump imageCube uImage;

// This isn't really trying to be "correct" atmospheric scattering in any way,
// but it looks OK for the purposes of this sample.

const vec3 base[] = vec3[](
    vec3(+1.0, +0.0, +0.0),
    vec3(-1.0, +0.0, +0.0),
    vec3(+0.0, +1.0, +0.0),
    vec3(+0.0, -1.0, +0.0),
    vec3(+0.0, +0.0, +1.0),
    vec3(+0.0, +0.0, -1.0));

const vec3 dx[] = vec3[](
    vec3(+0.0, +0.0, -1.0), 
    vec3(+0.0, +0.0, +1.0), 
    vec3(+1.0, +0.0, +0.0),
    vec3(+1.0, +0.0, +0.0),
    vec3(+1.0, +0.0, +0.0),
    vec3(-1.0, +0.0, +0.0));

const vec3 dy[] = vec3[](
    vec3(+0.0, -1.0, +0.0),
    vec3(+0.0, -1.0, +0.0),
    vec3(+0.0, +0.0, +1.0),
    vec3(+0.0, +0.0, -1.0),
    vec3(+0.0, -1.0, +0.0),
    vec3(+0.0, -1.0, +0.0));

vec3 rayleigh(vec3 from, vec3 to, float R)
{
    float cosTheta = dot(from, to);
    float modulator = 1.0 + cosTheta * cosTheta;
    const vec3 lambda = vec3(700e-9, 510e-9, 420e-9);
    const vec3 lambda4 = lambda * lambda * lambda * lambda;

    const float I = 1e-14;
    vec3 incoming = I * modulator / (lambda4 * R * R);
    return incoming;
}

vec4 accumulate(vec4 res, vec3 dir, float R)
{
    vec3 in_scatter = vec3(0.8, 0.4, 0.3) * rayleigh(-uSunDir, -dir, R);

    float transmission = 0.999;
    res.rgb += res.a * in_scatter;
    res.a *= transmission;

    return res;
}

vec3 trace_atmosphere(vec3 dir)
{
    vec4 res = vec4(0.0, 0.0, 0.0, 1.0);
    float R = uStart;

    for (int i = 0; i < uSteps; i++)
    {
        res = accumulate(res, dir, R);
        R += uStep;
    }

    return res.rgb;
}

void main()
{
    vec2 st = 2.0 * (vec2(gl_GlobalInvocationID.xy) + 0.5) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy) - 1.0;
    vec3 dir = base[gl_WorkGroupID.z] + st.x * dx[gl_WorkGroupID.z] + st.y * dy[gl_WorkGroupID.z];

    dir = normalize(dir);

    vec3 color = trace_atmosphere(dir);
    color += vec3(0.5, 0.75, 1.0) * pow(vec3(clamp(dot(dir, uSunDir), 0.0, 1.0)), vec3(20.0, 50.0, 200.0));
    color.r += 0.30 * pow(1.0 - abs(dir.y), 5.0);
    color.g += 0.10 * pow(clamp(1.0 - abs(dir.y - 0.1), 0.0, 1.0), 5.0);

    color = clamp(color, vec3(0.0), vec3(65535.0));
    imageStore(uImage, ivec3(gl_GlobalInvocationID), vec4(color, 1.0));
}
