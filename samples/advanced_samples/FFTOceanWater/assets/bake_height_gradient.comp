#version 310 es

/* Copyright (c) 2015-2017, ARM Limited and Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D uHeight;
layout(binding = 1) uniform sampler2D uDisplacement;
layout(rgba16f, binding = 0) uniform writeonly mediump image2D iHeightDisplacement;
layout(rgba16f, binding = 1) uniform writeonly mediump image2D iGradJacobian;
layout(location = 0) uniform vec4 uInvSize;
layout(location = 1) uniform vec4 uScale;

mediump float jacobian(mediump vec2 dDdx, mediump vec2 dDdy)
{
    return (1.0 + dDdx.x) * (1.0 + dDdy.y) - dDdx.y * dDdy.x;
}
#define LAMBDA 1.2

void main()
{
    vec4 uv = (vec2(gl_GlobalInvocationID.xy) * uInvSize.xy).xyxy + 0.5 * uInvSize;

    float h = textureLod(uHeight, uv.xy, 0.0).x;

    // Compute the heightmap gradient by simple differentiation.
    float x0 = textureLodOffset(uHeight, uv.xy, 0.0, ivec2(-1, 0)).x;
    float x1 = textureLodOffset(uHeight, uv.xy, 0.0, ivec2(+1, 0)).x;
    float y0 = textureLodOffset(uHeight, uv.xy, 0.0, ivec2(0, -1)).x;
    float y1 = textureLodOffset(uHeight, uv.xy, 0.0, ivec2(0, +1)).x;
    vec2 grad = uScale.xy * 0.5 * vec2(x1 - x0, y1 - y0);

    // Displacement map must be sampled with a different offset since it's a smaller texture.
    vec2 displacement = LAMBDA * textureLod(uDisplacement, uv.zw, 0.0).xy;

    // Compute jacobian.
    vec2 dDdx = 0.5 * LAMBDA * (
        textureLodOffset(uDisplacement, uv.zw, 0.0, ivec2(+1, 0)).xy -
        textureLodOffset(uDisplacement, uv.zw, 0.0, ivec2(-1, 0)).xy);
    vec2 dDdy = 0.5 * LAMBDA * (
        textureLodOffset(uDisplacement, uv.zw, 0.0, ivec2(0, +1)).xy -
        textureLodOffset(uDisplacement, uv.zw, 0.0, ivec2(0, -1)).xy);
    float j = jacobian(dDdx * uScale.z, dDdy * uScale.z);

    // Read by vertex shader/tess shader.
    imageStore(iHeightDisplacement, ivec2(gl_GlobalInvocationID.xy), vec4(h, displacement, 0.0));

    // Read by fragment shader.
    imageStore(iGradJacobian, ivec2(gl_GlobalInvocationID.xy), vec4(grad, j, 0.0));
}

